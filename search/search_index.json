{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"arkIQ System Documentation","text":""},{"location":"#data-transmission","title":"Data Transmission","text":"<p>The Things Stack stores only a limited number of device uplinks.</p> <p>Therefore, devices send uplinks directly to AWS using a private key.</p> <p>TTN AWS Integration Guide</p>"},{"location":"#aws-data-flow-integration","title":"AWS Data Flow Integration","text":"<p>Each application must be configured individually to transmit data to AWS.</p>"},{"location":"#receiving-data-on-aws","title":"Receiving Data on AWS","text":"<ol> <li> <p>Uplink sent from TTN to AWS</p> </li> <li> <p>AWS IoT Core receives the uplinks.    A separate IoT Core Rule is defined for each device type, extracting the necessary information from each uplink.</p> </li> <li> <p>The extracted data is sent to a dedicated queue for each device type.</p> </li> <li> <p>Each queue triggers a separate Lambda function, which processes the received data and follows a distinct path depending on the device.</p> </li> <li> <p>Alerts If necessary, alerts are sent via email and SMS.</p> </li> <li> <p>Database Storage Processed data is stored in the database.</p> </li> </ol>"},{"location":"#lambda-functions","title":"Lambda Functions","text":"<p>The Lambda functions are the core of the system. They handle all calculations and business logic decisions.</p>"},{"location":"#lambda-function-process_senospace","title":"Lambda Function: <code>Process_senospace</code>","text":""},{"location":"#purpose","title":"Purpose","text":"<p>Only for Water Leak Devices from Manufacture Senospace. Doesn't include Toilet Sensors</p>"},{"location":"#main-operations-and-algorithms","title":"Main Operations and Algorithms:","text":"<ul> <li> <p>Temperature: from Celcius to Fahrenheit</p> </li> <li> <p>Saves all connected gateways in a list and saves it in the database.</p> </li> <li> <p>Saves data in the browan_water_leak_data table and updates the latest data in the devices_last_data table.</p> </li> </ul> <p>Note: Alerts are not sent by this Lambda. This Lambda sends data to another Lambda (SendAlertNotification) and that one will decide whether to send an alert.</p>"},{"location":"#input-source","title":"Input Source","text":"<p>Receives messages from the following SQS queue: <code>senospace_uplink_queue</code></p>"},{"location":"#output-destinations","title":"Output Destinations","text":"<ul> <li>Sends data to Lambda: <code>SendAlertNotification</code></li> <li>Stores data in the following tables:</li> <li><code>devices_details</code></li> <li><code>senospace_data</code></li> <li><code>devices_last_data</code></li> </ul>"},{"location":"#input-format-json","title":"Input Format (JSON)","text":"<pre><code>{\n    \"device_id\": \"123\",\n    \"application_id\": \"app1\",\n    \"dev_eui\": \"1234\",\n    \"read_time\": \"2025-07-02T19:16:38.982846975Z\",\n    \"payload_type\": \"Heartbeat\",\n    \"payload_type_id\": 1,\n    \"battery_percentage\": 38,\n    \"battery_voltage\": 3.16,\n    \"external_leak_detection_enabled\": true,\n    \"pin_leak_detection_enabled\": true,\n    \"tamper_detection_enabled\": true,\n    \"humidity\": 54.2,\n    \"last_rssi\": -42,\n    \"last_snr\": 13,\n    \"external_leak_detected\": false,\n    \"jack_detected\": false,\n    \"magnet_detected\": false,\n    \"pin_leak_detected\": false,\n    \"power_detected\": false,\n    \"state_as_uint8\": 7,\n    \"temperature\": 24.33,\n    \"frame_count\": 2677,\n    \"metadata\": [\n        {\n            \"gateway_ids\": {\n                \"gateway_id\": \"eui-58a0cbfffe8040c1\",\n                \"eui\": \"58A0CBFFFE8040C1\"\n            },\n            \"time\": \"2025-07-02T19:16:38.982846975Z\",\n            \"timestamp\": 2143403483,\n            \"rssi\": -63,\n            \"channel_rssi\": -63,\n            \"snr\": 9.25,\n            \"uplink_token\": \"CiIKIAoUZXVpLTU4YTBjYmZmZmU4MDQwYzESCFigy//+gEDBENv7hv4HGgwIl4uWwwYQyZ28jAEg+L625rA+\",\n            \"received_at\": \"2025-07-02T19:16:39.241239981Z\"\n        },\n        {\n            \"gateway_ids\": {\n                \"gateway_id\": \"iqgw-tk-20\",\n                \"eui\": \"647FDAFFFE01F36D\"\n            },\n            \"timestamp\": 1245444315,\n            \"rssi\": -78,\n            \"channel_rssi\": -78,\n            \"snr\": 9.5,\n            \"uplink_token\": \"ChgKFgoKaXFndy10ay0yMBIIZH/a//4B820Q2/Hv0QQaDAiXi5bDBhCLqciXASD4rpDSn+UU\",\n            \"received_at\": \"2025-07-02T19:16:39.125916168Z\"\n        }\n    ]\n}\n</code></pre>"},{"location":"#lambda-function-process_long_flush_senospace","title":"Lambda Function: <code>Process_long_flush_senospace</code>","text":""},{"location":"#purpose_1","title":"Purpose","text":"<p>Only for Toilet Sensor Devices from Manufacture Senospace filtered by the uplinks of type LONG_FLUSH (payload_type_id = 10).</p>"},{"location":"#main-operations-and-algorithms_1","title":"Main Operations and Algorithms:","text":""},{"location":"#how-does-long-flush-work","title":"How Does Long Flush Work?","text":"<p>The device only sends the uplink after 3 minutes (default) of continuous flushing. In other words, when the uplink is received, the flushing has already been occurring for 3 minutes. Because of that, the Lambda must register that the flush started 3 minutes earlier.</p>"},{"location":"#end-of-flush","title":"End of Flush","text":"<p>When a flush ends, a different type of uplink is sent: Last Event Water Usage (<code>payload_type_id = 11</code>). However, this uplink is processed by another Lambda: <code>Process_water_usage_senospace</code>.</p>"},{"location":"#custom-long-flush-duration","title":"Custom Long Flush Duration","text":"<p>The user can request the device to register a flush only after 4 or more minutes. In this case:</p> <ol> <li>An external API (not the Lambda) stores on the device the setting that long flush should be recorded after 4+ minutes.</li> <li>The Lambda checks the device settings in the database.</li> <li>Based on the setting:</li> <li>If it's set to 3 minutes (default):      The long flush is recorded normally.</li> <li>If it's set to more than 3 minutes (late long flush): <ul> <li>The long flush is saved to the database.  </li> <li>The property <code>long_event_hide_on_dashboard</code> is set to <code>False</code>, so it won't appear on the Dashboard.  </li> <li>A schedule is created in EventBridge to trigger the long flush later via the <code>LateLongFlush</code> Lambda.</li> </ul> </li> </ol>"},{"location":"#notes","title":"Notes","text":"<ul> <li> <p>There is no information about gallons used in the flush in this uplink.   This data will arrive in a separate uplink of type Last Event Water Usage (<code>payload_type_id = 11</code>).</p> </li> <li> <p>The device is renamed with a <code>-flow</code> suffix to distinguish Toilet Sensor data from Leak Sensor data,   since Senospace includes both sensor types in the same transmitter.</p> </li> </ul>"},{"location":"#input-source_1","title":"Input Source","text":"<p>Receives messages from the following SQS queue: <code>long_flush_senospace_uplink_queue</code></p>"},{"location":"#output-destinations_1","title":"Output Destinations","text":"<ul> <li>Sends data to Lambda: <code>SendAlertToiletNotification</code>, <code>LateLongFlush</code></li> <li>Stores data in the following tables:</li> <li><code>devices_details</code></li> <li><code>senospace_alerts_data</code></li> <li><code>devices_last_data</code></li> </ul>"},{"location":"#input-format-json_1","title":"Input Format (JSON)","text":"<pre><code>{\n    \"device_id\": \"123\",\n    \"application_id\": \"app2\",\n    \"dev_eui\": \"1234\",\n    \"read_time\": \"2025-07-02T19:11:57.283046007Z\",\n    \"payload_type\": \"Alert\",\n    \"payload_type_id\": 10,\n    \"alert_type\": \"Pulse Counting (Long Event Alert)\",\n    \"current_status\": 1,\n    \"pulse_duration_trigger\": 180000,\n    \"frame_count\": 3642\n}\n</code></pre>"},{"location":"#lambda-function-process_water_usage_senospace","title":"Lambda Function: <code>Process_water_usage_senospace</code>","text":""},{"location":"#purpose_2","title":"Purpose","text":"<p>Only for Toilet Sensor Devices from Manufacture Senospace filtered by the uplinks of type WATER_USAGE (payload_type_id = 11).</p>"},{"location":"#main-operations-and-algorithms_2","title":"Main Operations and Algorithms:","text":""},{"location":"#how-does-water-usage-work","title":"How Does Water Usage Work?","text":"<p>Gallons_spent = Pulse_total_pulses * 0.264172</p> <p>Water usage can occur after a normal flush or after a Long Flush.</p> <p>If it is after a normal flush, then it simply records in the database that a flush occurred without needing to calculate when the flush started. However, there can be two types:</p> <ul> <li>Above 1 gallon: \"normal flush\"</li> <li>Equal to or less than 1 gallon: \"escape\" (value too low to be a real flush)</li> </ul> <p>If it is after a Long Flush, then:</p> <ul> <li>If the Long Flush has already been registered, then this Water Usage must be recorded at the moment the Long Flush started. The type of this flush must be \"long\".</li> <li>If the Long Flush has not yet been registered on the dashboard [see late long flush], then the Long Flush should not appear on the dashboard. Instead, it should appear as a normal flush, without the need to calculate when the flush started.</li> </ul>"},{"location":"#input-source_2","title":"Input Source","text":"<p>Receives messages from the following SQS queue: <code>water_usage_senospace_uplink_queue</code></p>"},{"location":"#output-destinations_2","title":"Output Destinations","text":"<ul> <li>Sends data to Lambda: <code>SendAlertToiletNotification</code></li> <li>Stores data in the following tables:</li> <li><code>devices_details</code></li> <li><code>senospace_alerts_data</code></li> <li><code>devices_last_data</code></li> </ul>"},{"location":"#input-format-json_2","title":"Input Format (JSON)","text":"<pre><code>{\n    \"device_id\": \"123\",\n    \"application_id\": \"app1\",\n    \"dev_eui\": \"1234\",\n    \"read_time\": \"2025-07-02T20:13:31.984311103Z\",\n    \"payload_type\": \"Alert\",\n    \"payload_type_id\": 11,\n    \"alert_type\": \"Pulse Counting Event (Last Event Usage)\",\n    \"humidity\": 54.33,\n    \"temperature\": 23.64,\n    \"pulse_device_type_id\": 1,\n    \"pulse_total_pulses\": 2902,\n    \"pulse_total_liters\": 2.694521819870009,\n    \"frame_count\": 24465\n}\n</code></pre>"},{"location":"#lambda-function-process_toilet_heartbeat_senospace","title":"Lambda Function: <code>Process_toilet_heartbeat_senospace</code>","text":""},{"location":"#purpose_3","title":"Purpose","text":"<p>Only for Toilet Sensor Devices from Manufacture Senospace filtered by the uplinks of type HEARTBEAT (payload_type_id = 9).</p>"},{"location":"#main-operations-and-algorithms_3","title":"Main Operations and Algorithms:","text":""},{"location":"#how-does-the-heartbeat-work","title":"How Does the Heartbeat Work?","text":"<p>The heartbeat shows what has occurred since the last heartbeat:</p> <ul> <li>Number of flushes  </li> <li>Gallons spent  </li> </ul> <p>Note: If a long flush is currently happening and has not yet finished, and a heartbeat is sent, then the gallons spent during this ongoing long flush are pre-calculated.</p>"},{"location":"#input-source_3","title":"Input Source","text":"<p>Receives messages from the following SQS queue: <code>BrowanWaterLeakUplinkQueue</code></p>"},{"location":"#output-destinations_3","title":"Output Destinations","text":"<ul> <li>Sends data to Lambda: <code>toilet_heartbeat_senospace_uplink_queue</code></li> <li>Stores data in the following tables:</li> <li><code>devices_details</code></li> <li><code>senospace_alerts_data</code></li> <li><code>devices_last_data</code></li> </ul>"},{"location":"#input-format-json_3","title":"Input Format (JSON)","text":"<pre><code>{\n    \"device_id\": \"123\",\n    \"application_id\": \"app1\",\n    \"dev_eui\": \"1234\",\n    \"read_time\": \"2025-07-02T20:18:57.869425058Z\",\n    \"payload_type\": \"Alert\",\n    \"payload_type_id\": 9,\n    \"alert_type\": \"Pulse Counting (Total Events)\",\n    \"pulse_long_event_triggered\": 0,\n    \"pulse_alert_interval\": 500,\n    \"pulse_device_type_id\": 1,\n    \"pulse_total_events\": 11,\n    \"pulse_total_pulses\": 11,\n    \"pulse_total_liters\": 0.01021355617455896,\n    \"frame_count\": 325\n}\n</code></pre>"},{"location":"#lambda-function-process_alerts_senospace","title":"Lambda Function: <code>Process_alerts_senospace</code>","text":""},{"location":"#purpose_4","title":"Purpose","text":"<p>Only for Leak Sensor and Toilet Sensor Devices from Manufacture Senospace filtered by the uplinks of payload_type_id = 1,2,3,4,5,6,7,8 and 12.</p>"},{"location":"#main-operations-and-algorithms_4","title":"Main Operations and Algorithms:","text":""},{"location":"#processing-based-on-payload_type_id","title":"Processing Based on <code>payload_type_id</code>","text":"<p>Depending on the <code>payload_type_id</code>, the processing is different:</p> <ul> <li> <p>payload_type_id = 1 \u2192 Leak Detected External (LEAK SENSOR)   Saves the event and calls the Lambda SendAlertNotification to send an alert.</p> </li> <li> <p>payload_type_id = 2 \u2192 Leak Detected Local (LEAK SENSOR)   Saves the event and calls the Lambda SendAlertNotification to send an alert.</p> </li> <li> <p>payload_type_id = 3 \u2192 Tamper (LEAK SENSOR)   Saves the event. This uplink is sent when the device comes into contact with the magnet (not actual movement).</p> </li> <li> <p>payload_type_id = 4 \u2192 Button Pressed (LEAK SENSOR)   Saves the event.</p> </li> <li> <p>payload_type_id = 5 \u2192 High Temperature (LEAK SENSOR)   Saves the event and calls the Lambda SendAlertNotification to send an alert.</p> </li> <li> <p>payload_type_id = 6 \u2192 Low Temperature (LEAK SENSOR)   Saves the event and calls the Lambda SendAlertNotification to send an alert.</p> </li> <li> <p>payload_type_id = 7 \u2192 High Humidity (LEAK SENSOR)   Saves the event and calls the Lambda SendAlertNotification to send an alert.</p> </li> <li> <p>payload_type_id = 8 \u2192 Low Humidity (LEAK SENSOR)   Saves the event and calls the Lambda SendAlertNotification to send an alert.</p> </li> <li> <p>payload_type_id = 12 \u2192 Headphone Jack Alert (LEAK SENSOR)   Saves the event.</p> </li> </ul>"},{"location":"#input-source_4","title":"Input Source","text":"<p>Receives messages from the following SQS queue: <code>alerts_senospace_uplink_queue</code></p>"},{"location":"#output-destinations_4","title":"Output Destinations","text":"<ul> <li>Sends data to Lambda: <code>SendAlertNotification</code>, <code>SendAlertToiletNotification</code></li> <li>Stores data in the following tables:</li> <li><code>devices_details</code></li> <li><code>senospace_data</code></li> <li><code>senospace_alerts_data</code></li> <li><code>devices_last_data</code></li> </ul>"},{"location":"#input-format-json-example-only-for-payload_type_id-2","title":"Input Format (JSON) - example only for payload_type_id = 2","text":"<pre><code>{\n    \"device_id\": \"123\",\n    \"application_id\": \"app4\",\n    \"dev_eui\": \"1234\",\n    \"read_time\": \"2025-07-02T18:46:19.129642963Z\",\n    \"payload_type\": \"Alert\",\n    \"payload_type_id\": 2,\n    \"alert_type\": \"Local Leak Detection (Via Bottom Contact Pins)\",\n    \"current_status\": 0,\n    \"current_value\": 3044,\n    \"humidity\": 49.23,\n    \"temperature\": 23.68,\n    \"delay_count\": 1,\n    \"trigger_value\": 5000,\n    \"frame_count\": 2789\n}\n</code></pre>"},{"location":"architecture/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"architecture/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live- docs server.</li> <li><code>mkdocs build</code> - Build the documreloadingentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"architecture/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}]}